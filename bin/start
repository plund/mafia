#!/bin/bash

# Use one of $HTTP_IP or $HTTP_INTERFACE for the mafia webserver to listen to.
# If interface is given it will look for an IPv4 address on this interface

#HTTP_IP="192.168.0.3"
#HTTP_INTERFACE="en0"

# If neither of the above is given here and if not found in file HTTP_CONFIG.txt
# the server will look for one IPv4 address to use on the interfaces: en0, en1,
# eth0, eth1 in that order.

# directory path setup
# $HOME needs to be defined here or by the OS

DOMAIN_NAME="mafia.peterlund.se"
APP_NAME=mafia
RUN_DIR=$HOME/running/$APP_NAME
SERVER_ROOT=$RUN_DIR/httpd/$DOMAIN_NAME

# A secure way to figure out where the repo and this script is located
SCRIPT_DIR=$(cd $(dirname $0) && pwd)
# A variant that resolves soft links
#SCRIPT_DIR=$(readlink -nf $(dirname $0))

# other
CMD=$(basename $0)
FULL_CMD=$SCRIPT_DIR/$CMD
silent=off

if [ "$HTTP_IP" != "" ]; then
    EXTRA="-http_ip $HTTP_IP"
elif  [ "$HTTP_INTERFACE" != "" ]; then
    EXTRA="-http_interface $HTTP_INTERFACE"
fi

echo "Started "$(date "+%Y-%m-%d, %H:%M:%S")
echo "whoami: "$(whoami)
echo "PATH: "$PATH
echo "HOME: "$HOME
echo "pwd: "$(pwd)
echo "@: "$@
echo "rebar3: "$(which rebar3)

echo $CMD

print_usage () {
    cat <<EOF
Description
  Compiles, installs, configures and starts up the Mafia bot.
  In order to run as a internet service you should have a domain name pointing
  to the public IP address of your home router.

  Your router needs to redirect incoming traffic to this machine where you run
  the bot:
  - Incoming http traffic on port 80 to port 50666
  - Incoming https traffic on port 443 to port 50667

Usage
  $CMD                - Manual interactive start
  $CMD -s | --silent  - Start silently with no questions
  $CMD -h | --help    - Prints this help text
EOF
}

while [[ $# -gt 0 ]] ; do
    case $1 in
        -s|--silent)
            silent=on
            shift # past argument
            ;;
        -h|--help)
            print_usage
            exit 1
            shift
            break
            ;;
        *)
            # unknown option
            print_usage
            exit 1
            ;;
    esac
done

PID=$(ps aux | grep -vE "(grep|to_erl|run_erl|bin/start)" | grep mafia \
          | awk '{print $2}')
if [ "$PID" != "" ] ; then
    echo "$APP_NAME is already running"
    exit 1
fi

# create directories for the mafia application
LOG_DIR=$RUN_DIR/logs
CNT_DIR=$RUN_DIR/counters
CMD_DIR=$RUN_DIR/command_files
THREAD_DIR=$RUN_DIR/thread_pages
PATCHES=$RUN_DIR/patches
SETTINGS=$RUN_DIR/game_settings
mkdir -p $LOG_DIR
mkdir -p $CNT_DIR
mkdir -p $CMD_DIR
mkdir -p $THREAD_DIR
mkdir -p $PATCHES
mkdir -p $SETTINGS
\rm $PATCHES/*beam

NODE_NAME=$APP_NAME
PIPE_DIR=$RUN_DIR/pipes
mkdir -p $PIPE_DIR
PIPE=$PIPE_DIR/$NODE_NAME

# create directories for the inets application
DOC_ROOT=$SERVER_ROOT/html
LOG_ROOT=$SERVER_ROOT/logs
TLS_DIR=$SERVER_ROOT/tls_cert
mkdir -p $DOC_ROOT
mkdir -p $LOG_ROOT
mkdir -p $TLS_DIR

if [ $silent = off ] ; then
    cat << EOF
Have you checked that you have the game_info.txt, thread_pages, command_files, \
counters in the $RUN_DIR and the correct html in $SERVER_ROOT and prepared the \
active game setup in mafia_db?
EOF
    echo -n "Reply \"y\" if ok and you want to startup (n) ? "
    read Answer

    if [ "$Answer" != "y" ] ; then
        echo "Ok prepare first and redo this command when you are done."
        exit 1
    fi
    echo "Ok we start up"
fi

# Compile in repo and copy code to run location
REPO_DIR=$(dirname $SCRIPT_DIR)
mkdir -p $RUN_DIR/priv
\cp $REPO_DIR/priv/escapes.txt $RUN_DIR/priv/escapes.txt
cd $REPO_DIR
REBAR=rebar3
$REBAR compile

if [ $? != 0 ] ; then
    echo "compile failed"
    which $REBAR
    if [ $? != 0 ] ; then
        echo -n "You need to download $REBAR from http://www.rebar3.org/ and "
        echo -n "make it available in your \$PATH before running this start "
        echo "script."
    else
        echo "==========>> Please, fix the compilation errors!!"
    fi
    exit 1
fi

APP_REPO=$REPO_DIR/_build/default/lib/$APP_NAME
APP_RUN=$RUN_DIR/lib/$APP_NAME
mkdir -p $APP_RUN/ebin
mkdir -p $APP_RUN/include
\cp $APP_REPO/ebin/* $APP_RUN/ebin/
\cp $APP_REPO/include/* $APP_RUN/include/

TLS_REPO_DIR=$REPO_DIR/priv/tls_cert
\cp $TLS_REPO_DIR/server.crt $TLS_DIR/
\cp $TLS_REPO_DIR/server.key $TLS_DIR/

WS_REPO=$REPO_DIR/_build/default/lib/websocket_client
WS_RUN=$RUN_DIR/lib/websocket_client
mkdir -p $WS_RUN/ebin
\cp $WS_REPO/ebin/* $WS_RUN/ebin/

MECK_REPO=$REPO_DIR/_build/default/lib/meck
MECK_RUN=$RUN_DIR/lib/meck
mkdir -p $MECK_RUN/ebin
\cp $MECK_REPO/ebin/* $MECK_RUN/ebin/

ERLPATH="$APP_RUN/ebin $WS_RUN/ebin $MECK_RUN/ebin"

cd $RUN_DIR

export RUN_ERL_LOG_ALIVE_MINUTES=60
export RUN_ERL_LOG_MAXSIZE=1000000
export RUN_ERL_LOG_GENERATIONS=20

run_erl -daemon $PIPE $LOG_DIR "exec erl -pa $ERLPATH $PATCHES \
-h_srv_root $SERVER_ROOT -h_doc_root $DOC_ROOT -h_log_root $LOG_ROOT \
-h_tls_dir $TLS_DIR \
-repo_dir $REPO_DIR $EXTRA -sname $NODE_NAME -s mafia"

echo "Connect to system with:"
echo "to_erl $PIPE"
exit 0

## ====================================================
#export HEART_COMMAND="$@"
#echo HEART_COMMAND=$HEART_COMMAND
#-env HEART_BEAT_TIMEOUT 30 # default 60 secs
# erl -heart -env HEART -s mafia
